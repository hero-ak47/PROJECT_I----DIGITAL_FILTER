library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.MATH_REAL.ALL;

entity tb_top_system is
end tb_top_system;

architecture sim of tb_top_system is
    --------------------------------------------------------------------
    -- Component under test
    --------------------------------------------------------------------
    component top_system is
        Port (
            clk        : in  std_logic;
            sclk       : out std_logic;
            rst        : in  std_logic;
            miso_adc   : in  std_logic;
            mosi_adc   : out std_logic;
            cs_adc     : inout std_logic;
            adc_data   : out std_logic_vector(11 downto 0);
            
            filter_out_check : out std_logic_vector(11 downto 0);
             
            cs_dac     : out std_logic;
            sck_dac    : out std_logic;
            dac_out    : out std_logic 
        );
    end component;

    --------------------------------------------------------------------
    -- Testbench signals
    --------------------------------------------------------------------
    signal clk_tb        : std_logic := '0';
    signal sclk_tb       : std_logic;
    signal rst_tb        : std_logic := '1';
    signal miso_adc_tb   : std_logic := '0';
    signal mosi_adc_tb   : std_logic;
    signal cs_adc_tb     : std_logic := '1';
 --   signal filter_out_tb : std_logic_vector(11 downto 0);
    signal adc_data_tb   : std_logic_vector(11 downto 0);
    signal filter_out_tb   : std_logic_vector(11 downto 0);
    signal cs_dac_tb     : std_logic;
    signal sck_dac_tb    : std_logic;
    signal dac_out_tb       : std_logic;

    constant CLK_PERIOD  : time := 10 ns;   -- 50 MHz
    constant SAMPLE_RATE : real := 50000.0; -- Hz
    constant F_SIN       : real := 10000.0; -- Hz
    constant ADC_WIDTH   : integer := 12;
    constant N_SAMPLES   : integer := 5000;
    constant PI          : real    := 3.1415926535;

    --------------------------------------------------------------------
    -- Bộ nhớ chứa mẫu sin
    --------------------------------------------------------------------
    type mem_array is array (0 to N_SAMPLES-1) of signed(ADC_WIDTH-1 downto 0);
    signal input_mem : mem_array := (others => (others => '0'));

begin
    --------------------------------------------------------------------
    -- PHẦN 1: Clock + DUT + Reset
    --------------------------------------------------------------------
    clk_process : process
    begin
        clk_tb <= '0';
        wait for CLK_PERIOD/2;
        clk_tb <= '1';
        wait for CLK_PERIOD/2;
    end process;

    dut: top_system
        port map (
            clk        => clk_tb,
            sclk       => sclk_tb,
            rst        => rst_tb,
            miso_adc   => miso_adc_tb,
            mosi_adc   => mosi_adc_tb,
            cs_adc     => cs_adc_tb,
            adc_data   => adc_data_tb,
            filter_out_check => filter_out_tb,
            cs_dac     => cs_dac_tb,
            sck_dac    => sck_dac_tb,
            dac_out    => dac_out_tb
        );

    stim_proc : process
    begin
        rst_tb <= '1';
        wait for 200 ns;
        rst_tb <= '0';
        wait;
    end process;

    --------------------------------------------------------------------
    -- PHẦN 2: Sinh dữ liệu sin lưu vào input_mem
    --------------------------------------------------------------------
    signal_gen : process
        variable t      : real := 0.0;
        variable signal_r: real := 0.0;
        variable sample : integer;
    begin
        for i in 0 to N_SAMPLES-1 loop
            t := real(i) / SAMPLE_RATE;
            signal_r :=  sin(2.0*PI*3000.0*t) * sin(2.0*PI*1000.0*t) ;
             sample := integer(signal_r * 2047.0);
            input_mem(i) <= to_signed(sample, ADC_WIDTH);
        end loop;
        wait;
    end process;

    --------------------------------------------------------------------
    -- PHẦN 3: Mô hình ADC phát dữ liệu ra MISO
    --------------------------------------------------------------------
    adc_model : process
    begin
        for n in 0 to N_SAMPLES-1 loop
            wait until cs_adc_tb = '0';   -- đợi master kéo CS xuống

            -- chờ vài xung dummy (tùy ADC thực)
            for d in 1 to 7 loop
                wait until rising_edge(sclk_tb);
            end loop;

            -- phát từng bit (MSB trước) từ input_mem
            for i in ADC_WIDTH-1 downto 0 loop
                wait until falling_edge(sclk_tb);
                miso_adc_tb <= std_logic(input_mem(n)(i));
            end loop;
        end loop;
        wait;
    end process;

end architecture;
